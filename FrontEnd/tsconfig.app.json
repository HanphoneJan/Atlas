{
  "compilerOptions": {
    "composite": true,
    "types": ["node"],
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ESNext",
    "useDefineForClassFields": true,
    "module": "esnext",
    "lib": ["ESNext", "DOM", "DOM.Iterable"],
    "skipLibCheck": true,
    "allowSyntheticDefaultImports": true,
    /* Bundler mode */
    "moduleResolution": "node",
    //"allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "jsx": "preserve",
    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.vue","src/**/**/*.vue"],
  "exclude": [
    "node_modules"
  ]
}
/**
 * TypeScript 配置文件，用于配置编译选项和文件包含/排除规则。
 * @compilerOptions - 编译选项配置：
 *   - composite: 启用项目的复合编译。
 *   - types: 指定要包含的类型定义。
 *   - tsBuildInfoFile: 指定 TypeScript 构建信息文件的路径。
 *   - target: 指定 ECMAScript 目标版本。
 *   - useDefineForClassFields: 使用定义的类字段。
 *   - module: 指定模块系统。
 *   - lib: 指定要包含的库文件。
 *   - skipLibCheck: 跳过库文件的类型检查。
 *   - allowSyntheticDefaultImports: 允许从没有默认导出的模块中默认导入。
 *   - moduleResolution: 指定模块解析策略。
 *   - isolatedModules: 启用孤立模块。
 *   - moduleDetection: 指定模块检测策略。
 *   - jsx: 指定 JSX 代码的处理方式。
 *   - strict: 启用所有严格类型检查选项。
 *   - noUnusedLocals: 报告未使用的局部变量。
 *   - noUnusedParameters: 报告未使用的函数参数。
 *   - noFallthroughCasesInSwitch: 报告 switch 语句中的 fallthrough 情况。
 *   - noUncheckedSideEffectImports: 报告未检查的副作用导入。
 * @include - 指定要包含的文件模式。
 * @exclude - 指定要排除的文件或目录。
 */
